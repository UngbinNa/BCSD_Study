using UnityEngine;
using System;

public class Exercise00 : MonoBehaviour
{
    
    //-----------------------------------------------------------------------------------
    /*
    //1강 : 변수와 데이터
    
    //int 타입의 value01 선언
    private int value01;
    private int value02, value03, value04;
    private int value05 = 10;
    private int value06 = 10, value07 = 20, value08 = 30; //여러개 동시 초기화 가능
    
    private void Awake()
    {
        value01 = 1;
        value02 = 2;
        value03 = 3;
        value04 = 4;
    }
    
    private int currentHP = 10;
    private readonly int maxHP = 100; //읽기 전용 변수 
    private const int maxMP = 100;    //상수
    
    public Exercise00()
    {
        maxHP = 200; //읽기 전용 변수는 초기화, 생성자에서 데이터 수정 가능 
    }
    private void Awake()
    {
        int currentMP = 35; //지역 변수, 함수가 끝나면 소멸 
        currentHP = 35;     //currentHP 변수에 100 저장 
        Debug.Log(currentHP);
        Debug.Log(currentMP);
        Debug.Log(maxHP);
    }
    
    private void Update()
    {
    }
    
    private void Awake()
    {
        Player player;
        player = GameObject.Find("PlayerObject").GetComponent<Player>();
        player.playerName = "나웅빈";
        player.TakeDamge(10);
    }
    */
    //---------------------------------------------------------------------------------------------------------------------
    /*
    //2강 기본 데이터 형식
    private void Awake()
    {
        
        sbyte byteValue = -128;
        byte ubyteValue = 255;
        short shortValue = -32768;
        ushort ushortValue = 65535;
        int intValue = -2147483648;
        uint uintValue = 4294967295;
        long longValue = -922337203685477588;
        ulong ulongValue = 18446744073709551615;
        char charValue = 'K';
        
        Debug.Log("byte Data : " + byteValue);
        Debug.Log("ubyte Data : " + ubyteValue);
        Debug.Log("short Data : " + shortValue);
        Debug.Log("ushort Data : " + ushortValue);
        Debug.Log("int Data : " + intValue);
        Debug.Log("uint Data : " + uintValue);
        Debug.Log("long Data : " + longValue);
        Debug.Log("ulong Data : " + ulongValue);
        Debug.Log("char Data : " + charValue);
        
        
        float floatValue01 = 3.141592653589793238462643383279f;   // 7자리 표현
        float floatValue02 = 31.141592653589793238462643383279f;  //7자리 표현
        double doubleValue = 3.141592653589793238462643383279;    //15자리 표현
        decimal decimalValue = 3.141592653589793238462643383279m; //29자리 표현
          
        Debug.Log("float Data : " + floatValue01);      
        Debug. Log("float Data : " + floatValue02);     
        Debug.Log("double Data : " + doubleValue);     
        Debug. Log("decimal Data : " + decimalValue); 
        
        
        string stringValue = "나는 나웅빈이다.";
        bool boolValue = true;
        
        Debug.Log("string Data : " + stringValue);
        Debug.Log("bool Data : " + boolValue);
        
        
        object valueInt = 31;                             
        object valueFloat = 3.14159265358979f;           
        object valueString = "객체지향 프로그래밍";     //박싱
        object valueBool = false;                       
        
        Debug.Log("정수 : " + valueInt);
        Debug.Log("실수 : " + valueFloat);
        Debug.Log("문자열 : " + valueString);          //언박싱
        Debug.Log("논리 : " + valueBool);
        
     
    }
    */
    //-------------------------------------------------------------------------------------------------------------
    /*
    //3강 데이터의 형 변환
    private void Awake()
    {
        
    sbyte sbyteValue = 10;
    int intValue = (int)sbyteValue;
    Debug.Log("sbyteValue : " + sbyteValue);
    Debug.Log("intValue : " + intValue);
    
    intValue = 130;
    sbyteValue = (sbyte)intValue;
    Debug.Log("sbyteValue : " + sbyteValue);
    Debug.Log("intValue : " + intValue);    //오버플로우 발생
    
    sbyte sbyteValue = 31;
    byte byteValue = (byte)sbyteValue;
    Debug.Log("sbyteValue : " + sbyteValue);
    Debug.Log("byteValue : " + byteValue);
    
    sbyteValue = -31;   //부호 있는 정수가 음수일 때
    byteValue = (byte)sbyteValue;
    Debug.Log("sbyteValue : " + sbyteValue);
    Debug.Log("byteValue : " + byteValue);
    
    byteValue = 200;    //부호 없는 정수가 부호 있는 정수 최대값보다 클 때
    sbyteValue = (sbyte)byteValue;
    Debug.Log("sbyteValue : " + sbyteValue);
    Debug.Log("byteValue : " + byteValue);
    
    float floatValue = 69.6875f;
    double doubleValue = (double)floatValue;
    Debug.Log("floatValue : " + floatValue);
    Debug.Log("doubleValue : " + doubleValue);
    
    floatValue = 0.1f;
    doubleValue = (double)floatValue;
    
    Debug.Log("floatValue : " + floatValue);
    Debug.Log("doubleValue : " + doubleValue);
    
    //문자열에 숫자가 아닌 데이터가 들어있을 경우 숫자로 형 변환을 시도하면 에러 발생.
    int intValue = 10;
    float floatValue = 12.3456f;
    string stringValue = "33";
    
    Debug.Log("intValue : " + intValue);
    Debug.Log("floatValue : " + floatValue);
    Debug. Log("stringValue: " + stringValue);

    //33.4567과 같은 실수를 int로 형 변환 시도하면 에러 발생
    //stringValue = "33.4567"
    
    intValue = int.Parse(stringValue);
    stringValue = "33.4567";
    floatValue = float.Parse(stringValue);
    
    Debug.Log("intValue : " + intValue);
    Debug.Log("floatvalue : " + floatValue);
    Debug.Log("stringValue : " + stringValue);
    
    string stringValue = "숫자가 아닙니다.";
    int intValue = 10;
    bool isConversion = int.TryParse(stringValue, out intValue);
    if (isConversion == true)
    {
        Debug.Log("stringValue : " + stringValue);
        Debug.Log("intValue : " + intValue);
    }
    else
    {
        Debug.Log("stringValue 변수에 들어있는 내용이 숫자가 아니어서 형변환에 실패하였습니다.");
    }
    
    string stringValue = "초기화";
    int intValue = 33;
    float floatValue = 12.3456f;
    
    Debug.Log("stringValue : " +stringValue);
    
    //정수를 문자열로 형 변환
    stringValue = floatValue.Tostring();
    Debug.Log("stringValue : " + stringValue);
    */
    //---------------------------------------------------------------------------------------------------------
    /*
    //4장 상수, 열거형
   
   //열거형을 이용해 플레이어 상태 관리 PlayerState 
   //playerstate = PlayerState.Idle;
   
    private void Awake()
    {
        const int PlayerIdle = 0;
        const int PlayerMove = 1;
        const int PlayerAttack = 2;
        
        int playerState = PlayerAttack;
        
        switch (playerState)
        {
            case PlayerIdle:
                Debug.Log("플레이어 상태 : 대기");
                break;
            case PlayerMove:
                Debug.Log("플레이어 상태 : 이동");
                break;
            case PlayerAttack:
                Debug.Log("플레이어 상태 : 공격");
                break;
        }
    }
    
    enum PlayerState { Idle, Move, Attack }
    
    private void Awake()
    {
        PlayerState playerState = PlayerState.Idle;
        
        switch (playerState)
        {
            case PlayerState.Idle:
                Debug.Log("플레이어 상태 : 대기");
                break;
            case PlayerState.Move:
                Debug.Log("플레이어 상태 : 이동");
                break;
            case PlayerState.Attack:
                Debug.Log("플레이어 상태 : 공격");
                break;
        }
    }
    
    private void Awake()
    {
        //Nullable
        int? intValue;
        
        intValue = null;
        Debug.Log(intValue.HasValue);
        //Debug.Log(intValue.Value);    //현재 intValue가 null이기 때문에 값을 출력하면 에러 발생
        
        intValue = 30;
        Debug.Log(intValue.HasValue);
        Debug.Log(intValue.Value);
        
        //var
        var valueInt = 33;
        var valueFloat = 33.4567f;
        var valuestring = "문자열";
        
        Debug.Log("5/4 : " + valueInt);
        Debug.Log(" 실수 : " + valueFloat);
        Debug.Log("문자열 : " + valuestring);
    }
    */
    //--------------------------------------------------------------------------------------------------
    /*
    //5장 문자열 다루기
    
    private void Awake()
    {
        int minutes = 1;
        int seconds = 15;
        
        //서식 항목 - 맞춤
        Debug.Log(string.Format("기본 : {0){1}{2}", minutes, ":", seconds));
        Debug.Log(string.Format("왼쪽 맞춤 : {0, -5}{1}{2}", minutes, ":", seconds));
        Debug.Log(string.Format("오른쪽 맞춤 : {0, -5}{1}{2}", minutes, ":", seconds));
        
        //서식 항목 - 서식 문자열 설정(숫자)
        Debug.Log(string.Format("1e진수 서식화 : {0:D}", 123));
        Debug.Log(string.Format("10진수 서식화(5자리) : {0:D5)", 123));
        
        Debug.Log(string.Format("16진수 서식화 : {0:X}", 0x00));
        Debug.Log(string.Format("16진수 서식화(10자리) : (0:X10)", 0X00));
        
        Debug.Log(string.Format("고정소수점 서식화 : {0:F)", 1.23));
        Debug.Log(string.Format("고정소수점 서식화(소수점 1자리) : {0:F1}", 1.23));
        
        Debug.Log(string.Format("콤마로 구분 : {0:N}", 1234567890));
        Debug.Log(string.Format("지수 : (0:E}", 1234567890));
        
        //서식 문자열 설정(날짜)
        //DateTime 구조체를 사용하려면 using System; 추가
        
        DateTime dt = new DateTime(2020, 2, 22, 13, 40, 0);
        string str = dt.ToString("yyyy-MM-dd tt hh:mm:ss (dddd)");
        Debug.Log(str);
        
        str = dt.ToString("yyyy-MM-dd HH:mm:ss (dddd)");
        Debug.Log(str);
        
        //string.Format()
        Debug.Log(string.Format("{0}{1}{2}", minutes, ":", seconds));
        
        //문자열 보간
        Debug.Log($" {minutes} : {seconds}");
        
        //string.Format()
        Debug.Log(string.Format("{0, -10:D5}", minutes));
        
        //문자열 보간
        Debug.Log($"{minutes, -10:D5}");
        
        string str = "Hello, World";
        Debug.Log(str);
        
        int numeric = str.IndexOf('o');
        Debug.Log($"o는 앞에서부터 { numeric + 1} 번째에 있습니다.");
        
        numeric = str.LastIndexOf('o');
        Debug.Log($"o는 뒤에서부터 {numeric} 번째에 있습니다.");
        
        bool isTrue = str.StartsWith("Hello");
        Debug.Log($"{str} 문장은 Hello부터 시작한다? {isTrue}");
        
        isTrue = str.StartsWith("World");
        Debug.Log($"{str} 문장은 World부터 시작한다? {isTrue}");
        
        isTrue = str.EndsWith("Hello");
        Debug.Log($"{str} 문장은 He11o로 끝난다? {isTrue}");
        
        isTrue = str.EndsWith("World");
        Debug.Log($"(str) 문장은 World로 끝난다? {isTrue}");
        
        isTrue = str.Contains("Hell");
        Debug.Log($"{str} 문장에 Hell이 포함되어 있다? {isTrue}");
        
        string str = "HELLO, WORLD";
        Debug.Log(str);
        
        str = str.ToLower();              //대문자 - > 소문자
        Debug.Log($"ToLower () - {str}");
        
        str = str.ToUpper();              //소문자 -> 대문자
        Debug.Log($"ToUpper () - {str}");
       
        str = str.Insert(0, "Hi~ ");      //원하는 위치에 문자열 삽입
        Debug.Log($"Insert () - (str!");
        
        str = str.Remove(0, 4);           //원하는 범위의 문자열 삭제
        Debug.Log($"Remove () - {str}");
        
        Debug.Log("== Trim ==");
        //공백 추가
        
        str = "     " + str + "     ";
        Debug.Log(str + "공백 체크");
        
        str = str.Trim();         //문자열의 앞, 뒤 공백 제거
        //str = str.Trimstart();  //문자열의 앞 공백 제거
        //str = str.TrimEnd();    //문자열의 뒤 공백 제거
        Debug.Log(str + "공백 체크");
        
        Debug.Log($"Before Replace: {str}");
        str = str.Replace("HELLO", "BYE");      //HELLO문자열을 BYE 문자열로 대체
        Debug.Log($"After Replace : {str}");
        
        string position = "3, 5, 6";
        //Split()를 이용해 문자열을 분할하면 분할한 개수만큼 배열에 저장
        //쉼표(,)를 기준으로 분할
        string[] str = position.Split(',');
        Debug.Log($"{str[0]}, {str[1]}, {str[2]}");
        
        string str2 = "HELLO, WORLD";
        //7번쨰 위치부터 뒤에있는 문자열만 다시 저장
        str2 = str2.Substring(7);
        Debug.Log(str2);
    }
    */
    //------------------------------------------------------------------------------------------------
    /*
    //6장 연산자
    private void Awake()
    {
    
        int a = 10;
        Debug.Log($"a = 10 : {a}");
        
        a += 10;
        Debug.Log($"a += 10 : 결과 값 {a}");
        
        //문자열 보간의 보간식에 수식을 넣어서 연산
        Debug.Log($"a -= 9 : 결과 값 {a -= 9}");
        Debug.Log($"a *= 8 : 결과 값 {a *= 8}");
        Debug.Log($"a /= 7 : 결과 값 {a /= 7}");
        Debug.Log($"a %= 6 : 결과 값 {a %= 6}");
        Debug.Log($"a &= 5 : 결과 값 {a &= 5}");
        Debug.Log($"a |= 4 : 결과 값 {a |= 4}");
        Debug.Log($"a ^= 3 : 결과 값 {a ^= 3}");
        Debug.Log($"a <<=2 : 결과 값 {a <<= 2}");
        Debug.Log($"a >>=1 : 결과 값 {a >>= 1}");
        
        int a = 10;
        Debug.Log(a);
        
        a++;          //후위 증가 연산자
        Debug.Log(a);
          
        ++a;        //전위 증가 연산자
        Debug.Log(a);
        
        Debug.Log(a++);
        Debug.Log(a);     //Debug.Log()실행 후 a값 증가
        Debug.Log(++a);
        Debug.Log(a);     //a값 증가 후 Debug.Log()실행
        
        int x = 5, y = 2;
        
        Debug.Log($" {x} > {y} = {x > y}");
        Debug.Log($" {x} < {y} = {x < y}");
        Debug.Log($" {x} >= {y} = {x >= y}");
        Debug.Log($" {x} <= {y} = {x <= y}");
        Debug.Log($" {x} == {y} = {x == y}");
        Debug.Log($" {x} != {y} = {x != y}");
        
          bool result = false;
        int x = 5, y = 2;
        
        //&&연산자(두 조건이 모두 참일 때만 참)
        result = x > 2 && y != 5;
        Debug.Log($" {x} > 2 && {y} != 5 = {result}");
        
        //||연산자(두 조건이 모두 거짓일 때만 거짓)
        result = x < 4 || y == 3;
        Debug.Log($"{x} < 4 || {y} == 3 = {result}");
        
        //! 연산자(참은 거짓으로, 거짓은 참으로)
        Debug.Log(result);
        result = !result;
        Debug.Log(result);
        
        //조건(삼항 연산자)
        int hp = -10;
        hp = hp < 0 ? 0 : hp;
        Debug.Log("체력:" + hp);
        
        
        int a = 5 + 6;
        int b = a - 3;
        int c = a * b;
        int d = c / 8;
        int e = d % 4;
        Debug.Log($"{a} = 5 + 6");
        Debug.Log($"{b} = {a} - 3");
        Debug.Log($"{c} = {a} * {b}");
        Debug.Log($"{d} = {c} / 8");
        Debug.Log($"{e} = {d} % 4");
        
        
        
        
        
        
        
        
      
        
        
        int a = 3;                          // 0000 0011
        
        Debug.Log($"{a} << 1 = {a << 1}");  // 0000 0110 = 6
        Debug.Log($"{a} << 2 = {a << 2}");  // 0000 1100 = 12
        Debug.Log($"{a} << 3 = {a << 3}");  // 0001 1000 = 24
        Debug.Log($"{a} << 4 = {a << 4}");  // 0011 0000 = 48
        
        a = 255;                            // 1111 1111 
        Debug.Log($"{a} >> 1 = {a >> 1}");  // 0111 1111 = 127
        Debug.Log($"{a} >> 2 = {a >> 2}");  // 0011 1111 = 63
        Debug.Log($"{a} >> 3 = {a >> 3}");  // 0001 1111 = 31
        Debug.Log($"{a} >> 4 = {a >> 4}");  // 0000 1111 = 15
        
        a = -255;                           // 0000 0001
        Debug.Log($"{a} >> 1 = {a >> 1}");  // 1000 0000 = -128
        Debug.Log($"{a} >> 2 = {a >> 2}");  // 1100 0000 = -64
        Debug.Log($"{a} >> 3 = {a >> 3}");  // 1110 0000 = -32
        Debug.Log($"{a} >> 4 = {a >> 4}");  // 1111 0000 = -16
        
        //이진수 형태로 출력
        Debug.Log(Convert.ToString(a >> 4, 2));
        
        //논리곱 연산자 &
        Debug.Log($"10 & 6 = {10 & 6}");
        
        //논리합 연산자 |
        Debug.Log($"10 | 6 = {10 | 6}");
        
        //배타적 논리합 연산자 ^
        Debug.Log($"10 ^ 6 = {10 ^ 6}");
        
        //보수 연산자
        Debug.Log($"~10 = {~10}");
    }
    */
    //---------------------------------------------------------------------------------------------------
    /*
    
    //7장 조건문
    [SerializeField]    //어트리뷰트 클래스 멤버 변수를 선언할 때 변수 앞 또는 바로 윗줄에 작성하면 유니티 에디터에서 해당 클래서 변수값을 설정할 수 있다
    private int x = 10;
    
    private void Awake()
    {
        if (x % 2 == 0)
        {
            Debug.Log("x는 짝수다");
        }
        
        //앞에서 배운 연산자를 이용해 조건문 내부에 여러개의 조건식을 동시에 만족하도록 설정 가능
        if (x > 5 && x < 10)
        {
            Debug.Log("x는5보다크고10보다작다");
        }
        
        //조건문 내부에서 중첩해서 조건문 작성 가능. 위의 if 조건문과 같은 결과를 출력할 것이다
        
        if (x > 5)
        {
            if (x < 10)
            {
                Debug.Log("x는 5보다 크고 10보다 작다");
            }
        }
        
        Debug.Log($"x의 값음 {x}");
        
        
        if (x % 2 == 0)
        {
            Debug.Log("x는 짝수다");
        }
        else
        {
            Debug.Log("x는 홀수다");
        }
        
        //앞에서 배운 연산자를 이용해 조건문 내부에 여러개의 조건식을 동시에 만족하도록 설정 가능
        
        if (x > 5 && x < 10)
        
        //조건문 내부에서 중첩해서 조건문 작성 가능
        //위의 조건문과 같은 결과를 출력할 것이다.
        
        {
            Debug.Log("x는 5보다 크고 10보다 작다");
        }
        if (x > 5)
        {
            Debug.Log("x는 5보다 크다");
        }
        Debug.Log($"x의 값음 {x}");
        
        
        if (x >= 90)
        {
            Debug.Log("학점 : A+");
        }
        else if (x >= 80)
        {
            Debug.Log("학점 : B+");
        }
        else if (x >= 70)
        {
            Debug.Log("학점 : C+");
        }
        else if (x >= 60)
        {
            Debug.Log("학점 : D");
        }
        else
        {
            Debug.Log("학점 : F");
        }
        
        x /= 10;
        
        switch (x)
        {
            case 10:
                Debug.Log("학점 : A+");
                break;
            case 9:
                Debug.Log("학점 : A+");
                break;
            case 8:
                Debug.Log("학점 : B+");
                break;
            case 7:
                Debug.Log("학점 : C+");
                break;
            case 6:
                Debug.Log("학점 : D");
                break;
            default:
                Debug.Log("학점 : F");
                break;
        }
    }
    */
    //--------------------------------------------------------------------------------------------
    /*
    //8장 반복문
    
    [SerializeField]
    private int x = 10;
    
    private void Awake()
    {
        //for 반복문에서 사용하는 index 변수는 반복분 내부에서 선언했기 떄문에 지역변수로 취급되어 반복문이 종료되면 데이터가 삭제된다
        for (int index = 0; index < 10; ++index)
        {
            Debug.Log(index);
        }
        
        //조건문과 마찬가지로 반복문도 중첩해서 사용 가능
        for (int x = 1; x < 10; ++×)
        {
            for (int y = 1; y < 10; ++y)
            {
                Debug.Log($" {x} × {y} = {x * y}");
            }
        }
       
        int result = 0;
        int index = 1;
        
        while (index <= 100)
        {
            result += index;
            
            index++;
        }
        
        Debug.Log($"1부터 100까지의 합 {result}");
    }
    */
    //------------------------------------------------------------------------------------------------------
    /*
    //9장 배열

    public class Exercise03 : MonoBehaviour
    {
        [SerializeField]
        private int x = 10;
        
        private void Awake()
        {
          int[] enemys = new int[5];
          
          Debug.Log(&"배열의 타입 : {enemys.GetType()}");
          Debug.Log(&"배열의 기본 타입 : {enemys.GetType().BaseType}");
          
          Debug.Log("== 정렬 전 ==");
          for(int index = 0; index < enemys.Length; ++index)
          {
            //using System에도 Random 클래스가 있기 때문에 앞에 UnityEngine 이름공간을 붙여준다
            enemys[index] = UnityEngine.Random.Range(0,100);
            
            Debug.Log(enemys[index]);
          }
          
          Array.Sort(enemys);         //매개변수로 사용한 enemys를 정렬
          for(int index=0; index<enemys.Length; ++index)
          {
            Debug.Log(enemys[index]);
          }
          
          Debug.Log($"enemys[index]");
          
          int[][] array = new int [3][];
          
          array[0] = new int [3] {1,2,3};
          array[1] = new int [] {10, 20, 30, 40};
          array[2] = new int [] {100,200, 300, 400, 500};
          
          for(int i=0; i<array.Length; ++i)
          {
              for(int j=0; j<array[i].Length; ++j)
              {
                Debug.Log($"[{i}] [{j}] = {array[i][[j]}");
              }
              
          }
          */
//--------------------------------------------------finished------------------------------------------------------
        
        
        
        
